import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:flutter/foundation.dart';

const LOG = _Logger();

class _Logger {
  const _Logger();

  /// Log message at level DEBUG.
  void debug(message, [Object error, StackTrace stackTrace]) => _log(LogLevel.DEBUG, message, error, stackTrace);

  /// Log message at level INFO.
  void info(message, [Object error, StackTrace stackTrace]) => _log(LogLevel.INFO, message, error, stackTrace);

  /// Log message at level WARN.
  void warn(message, [Object error, StackTrace stackTrace]) => _log(LogLevel.WARN, message, error, stackTrace);

  /// Log message at level SEVERE
  void error(message, [Object error, StackTrace stackTrace]) => _log(LogLevel.ERROR, message, error, stackTrace);

  /// custom event to firebase
  void event(String name, [Map<String, dynamic> parameters]) {
    FirebaseAnalytics().logEvent(name: name, parameters: parameters);
  }

  _log(LogLevel logLevel, Object message, [Object error, StackTrace stackTrace]) {
    String level = describeEnum(logLevel);
    if (logLevel == LogLevel.ERROR) {
      stackTrace ??= StackTrace.current;
      error ??= 'autogenerated stack trace for $level $message';
    }
    String log = '${DateTime.now()} : [$level] : $message';
    if (error != null) {
      log += '\n$error';
    }
    if (stackTrace != null) {
      log += '\n$stackTrace';
    }
    FirebaseCrashlytics.instance.log(log);
    print(log);
  }
}

enum LogLevel { DEBUG, INFO, WARN, ERROR }
